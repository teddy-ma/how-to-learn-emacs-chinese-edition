== 为什么是 Emacs

我相信未来的软件工程，如果我们要在日益增加的复杂性中存活的话，关键在于领域特定语言，
它能用几百行而不像现在的软件系统那样需要数万至数十万行的代码来表示一个解决方案。

为什么这一定要用 Emacs 来做呢? 恩, 如果你频繁的使用数十种语言, 甚至创建过自己的语言, 你想要一个可编程的，方便扩展的编辑器。 
Emacs 的核心是一个 Emacs Lisp 的解释器, 它一个成熟的编程语言。包含极好的集成帮助, 代码导航和一个调试器。
因为解释器内置在 Emacs 中, 你可以交互式的编写你的工具和进行定制; 你做的改变会立刻起作用。（如果你熟悉其他解释型语言你就已经知道并爱上了方便的 REPL）。 
Emcas 的库和 API 接口数量是巨大的, 但是 Emacs Lisp 本身是很简单的。

=== Emacs vs. _____

『写一个 Eclipse 或者 Intellij（或者 Visual Studio）的插件是非常困难的，所以几乎没有人这样做。
这意味着没有构建和自定义你自己的工具的社区 。。。更有甚者，创建一个插件的高难度导致人们只做有真正重大意义的程序，
然而在 Emacs 中，一个『插件』可以是任何大小，从一行代码到一个巨大的系统和框架 footnote:[Steve Yegge, XEmacs is dead. Long live XEmacs!. Read all of Steve’s Emacs articles for some equally conflicted (but much funnier) Emacs advocacy。』

当然，有很多合情合理的理由 *不去* 学习 Emacs。如果你几乎只做 Java，Windows/.NET 或者 OS X/iOS 编程，那就有足够的理由使用 Eclipse/Intellij，Visual Studio，或者 XCode。你肯定会在使用IDE的特性方面获得更多的经验。

或者你仅仅是厌恶你使用的工具的复杂：我的早期导师，我最尊重的的程序员之一，同时使用几十个记事本和终端窗口和一个超长的任务栏在屏幕的左边来区分它们。这是真实的故事。

=== 关于生命周期的思考

*...你的语言:* 即使你不买『数十种领域特定语言』的帐，想想你 10 年以后，你会仍然只用 Java 或者 C++ 写程序吗？

*...你的编辑器:* GNU Emacs 已经存在 30 年了，在更早 10 年还有更早的版本。它是开源的 (http://www.gnu.org/philosophy/free-sw.html[自由的])软件。
至今仍有活跃的开发者，有一个巨大的，多才的社区为每一种新的语言写插件，你可以想象 TextMate 或者 Sublime Text 或者其他的编辑器有这么长的生命周期吗？
